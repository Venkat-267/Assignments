USE TicketBookingSystem;

-- List Events and Their Average Ticket Prices. 
SELECT event_type, avg(ticket_price) as AverageTicketPrice FROM Event
GROUP BY event_type;

-- Calculate the Total Revenue Generated by Events.	
SELECT e.event_id, e.event_name, SUM(b.total_cost) AS TotalRevenue  
FROM Event e  
JOIN Booking b ON e.event_id = b.event_id  
GROUP BY e.event_id, e.event_name  
ORDER BY TotalRevenue DESC;

-- find the event with the highest ticket sales. 
SELECT TOP 1 e.event_id, e.event_name, SUM(b.num_tickets) AS totalTicketsSold FROM Event e  
JOIN Booking b ON e.event_id = b.event_id  
GROUP BY e.event_id, e.event_name  
ORDER BY totalTicketsSold DESC;

-- Calculate the Total Number of Tickets Sold for Each Event.
SELECT e.event_id,e.event_name, sum(b.num_tickets) as TotalTicketsSold FROM Event e
JOIN Booking b on e.event_id=b.event_id
GROUP BY e.event_id,e.event_name;

-- Find Events with No Ticket Sales.
SELECT e.event_id, e.event_name FROM Event e  
LEFT JOIN Booking b ON e.event_id = b.event_id  
WHERE b.booking_id IS NULL;

-- Find the User Who Has Booked the Most Tickets. 
SELECT TOP 1 c.customer_id,c.customer_name, SUM(b.num_tickets) AS totalTicketsBooked FROM Customer c  
JOIN Booking b ON c.customer_id = b.event_id  
GROUP BY c.customer_id, c.customer_name
ORDER BY totalTicketsBooked DESC;

-- List Events and the total number of tickets sold for each month.
SELECT FORMAT(b.booking_date, 'yyyy-MM') AS month, e.event_id, e.event_name, SUM(b.num_tickets) AS total_tickets_sold FROM Event e  
JOIN Booking b ON e.event_id = b.event_id  
GROUP BY FORMAT(b.booking_date, 'yyyy-MM'), e.event_id, e.event_name  
ORDER BY month, total_tickets_sold DESC;

-- calculate the average Ticket Price for Events in Each Venue.
SELECT v.venue_id, v.venue_name, AVG(e.ticket_price) AS avg_ticket_price FROM Venue v  
JOIN Event e ON v.venue_id = e.venue_id  
GROUP BY v.venue_id, v.venue_name  
ORDER BY avg_ticket_price DESC;

-- calculate the total Number of Tickets Sold for Each Event Type.
SELECT e.event_type, SUM(b.num_tickets) AS totalTicketsSold FROM Event e  
JOIN Booking b ON e.event_id = b.event_id  
GROUP BY e.event_type
ORDER BY totalTicketsSold DESC;

-- calculate the total Revenue Generated by Events in Each Year. 
SELECT YEAR(booking_date) as Year, SUM(total_cost) as TotalRevenue FROM Booking
GROUP BY YEAR(booking_date)
ORDER BY Year;

-- list users who have booked tickets for multiple events. 
SELECT customer_id, COUNT(DISTINCT event_id) FROM Booking
GROUP BY customer_id
HAVING COUNT(DISTINCT event_id)>1;

-- calculate the Total Revenue Generated by Events for Each User. 
SELECT c.customer_id,c.customer_name,SUM(b.total_cost) as TotalRevenueGenerated FROM Booking b
JOIN Customer c
ON c.customer_id=b.customer_id
GROUP BY c.customer_id,c.customer_name;

-- calculate the Average Ticket Price for Events in Each Category and Venue.
SELECT v.venue_name,e.event_type,AVG(e.ticket_price) as AverageTicketPrice FROM Event e
JOIN Venue v
ON v.venue_id=e.venue_id
GROUP BY e.event_type,v.venue_name;

-- list Users and the Total Number of Tickets They've Purchased in the Last 30 Days. 
SELECT c.customer_id, c.customer_name, SUM(b.num_tickets) as TotalTicketsPurchased FROM Customer c
JOIN Booking b ON c.customer_id=b.customer_id
WHERE b.booking_date>=DATEADD(DAY,-30,GETDATE())
GROUP BY c.customer_id,c.customer_name;