USE TicketBookingSystem;

-- Average Ticket Price for Events in Each Venue Using a Subquery.
SELECT v.venue_id, v.venue_name, (SELECT avg(e.ticket_price) FROM Event e WHERE e.venue_id=v.venue_id ) AS AveragePrice FROM Venue v;

-- update Booking set num_tickets=201 where booking_id=7
-- Events with More Than 50% of Tickets Sold using subquery. 
SELECT e.event_id, e.event_name FROM Event e WHERE (SELECT SUM(b.num_tickets) FROM Booking b WHERE b.event_id=e.event_id)>(e.total_seats)/2;

-- Calculate the Total Number of Tickets Sold for Each Event.
SELECT e.event_id,e.event_name, (SELECT SUM(b.num_tickets) FROM Booking b WHERE b.event_id=e.event_id) AS TotalTicketsSold FROM Event e;

-- insert into customer(customer_name,email,phone_number) values('Sam','sam@example.com',4561237890)
-- Find Users Who Have Not Booked Any Tickets Using a NOT EXISTS Subquery.
SELECT c.customer_id, c.customer_name FROM Customer c WHERE NOT EXISTS (SELECT b.customer_id FROM Booking b WHERE b.customer_id = c.customer_id);

-- insert into event(event_name,event_date,event_time,venue_id,total_seats,available_seats,ticket_price,event_type) values('Zootopia','2025-03-24','14:00',7,400,400,300.00,'Movie')
-- List Events with No Ticket Sales Using a NOT IN Subquery.
SELECT e.event_id, e.event_name FROM Event e WHERE e.event_id NOT IN (SELECT b.event_id FROM Booking b WHERE b.event_id=e.event_id);

-- Calculate the Total Number of Tickets Sold for Each Event Type Using a Subquery
-- SELECT e.event_type,(SELECT SUM(b.num_tickets) FROM Booking b WHERE b.event_id=e.event_id) AS TotalTickets FROM Event e
SELECT event_type, SUM(TotalTickets) AS TotalTicketsSold
FROM (SELECT e.event_type,(SELECT SUM(b.num_tickets) FROM Booking b WHERE b.event_id=e.event_id) AS TotalTickets FROM Event e) AS TicketData 
GROUP BY event_type;

-- Find Events with Ticket Prices Higher Than the Average Ticket Price Using a Subquery in the WHERE Clause.
SELECT event_name, ticket_price FROM Event WHERE ticket_price >= (SELECT AVG(ticket_price) FROM Event)

-- Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery.
SELECT c.customer_id, c.customer_name, (SELECT SUM(b.total_cost) FROM Booking b WHERE b.customer_id=c.customer_id GROUP BY customer_id) AS TotalRevenueGenerated FROM Customer c;

-- List Users Who Have Booked Tickets for Events in a Given Venue Using a Subquery in the WHERE Clause.
-- Give VenueID: SELECT v.venue_id FROM Venue v WHERE v.venue_name='Sunset Arena'
-- Give EventID: SELECT e.event_id FROM Event e WHERE e.venue_id=(SELECT v.venue_id FROM Venue v WHERE v.venue_name='Sunset Arena')
-- Give CustomerID: SELECT DISTINCT b.customer_id FROM Booking b WHERE b.event_id IN (SELECT e.event_id FROM Event e WHERE e.venue_id=(SELECT v.venue_id FROM Venue v WHERE v.venue_name='Sunset Arena'))

SELECT c.customer_id, c.customer_name FROM Customer c 
WHERE c.customer_id IN (
SELECT DISTINCT b.customer_id FROM Booking b
WHERE b.event_id IN (
SELECT e.event_id FROM Event e WHERE e.venue_id=(
SELECT v.venue_id FROM Venue v WHERE v.venue_name='Sunset Arena')
)
);

-- Calculate the Total Number of Tickets Sold for Each Event Category Using a Subquery with GROUP BY.
-- SELECT SUM(num_tickets) FROM Booking
SELECT event_type, (SELECT SUM(num_tickets) FROM Booking WHERE event_id IN (  
SELECT event_id FROM Event e2 WHERE e2.event_type = e1.event_type)) AS TotalTicketsSold  
FROM Event e1
GROUP BY event_type;

-- Find Users Who Have Booked Tickets for Events in each Month Using a Subquery with DATE_FORMAT. 
-- SELECT customer_id, FORMAT(booking_date,'yyyy-MM') AS BookingMonth, num_tickets FROM Booking;
-- SELECT customer_id, (SELECT customer_name FROM Customer c WHERE c.customer_id=b.customer_id) AS customer_name, FORMAT(booking_date,'yyyy-MM') AS BookingMonth, SUM(num_tickets) as TotalTickets FROM Booking GROUP BY customer_id, FORMAT(booking_date, 'yyyy-MM');
SELECT customer_id, customer_name, booking_month, total_tickets  
FROM (SELECT b.customer_id,(SELECT c.customer_name FROM Customer c WHERE c.customer_id = b.customer_id) AS customer_name,
FORMAT(b.booking_date, 'yyyy-MM') AS booking_month,SUM(b.num_tickets) AS total_tickets  
FROM Booking b GROUP BY b.customer_id, FORMAT(b.booking_date, 'yyyy-MM')  
) AS MonthlyBookings  
ORDER BY booking_month, total_tickets DESC;

-- Calculate the Average Ticket Price for Events in Each Venue Using a Subquery
SELECT v.venue_id, v.venue_name, AverageTicketPrice  
FROM Venue v, (SELECT venue_id, AVG(ticket_price) AS AverageTicketPrice FROM Event GROUP BY venue_id) AS TicketPrice  
WHERE v.venue_id = TicketPrice.venue_id;